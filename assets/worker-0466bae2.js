(function(){"use strict";const N="p1",p="p2",g="win",y="easy",L="medium",h="hard";function O(n){const i=[];for(let e=0;e<7;e++)for(let t=6-1;t>=0;t--)try{if(n[t][e]==null){i.push({row:t,column:e});break}}catch(s){console.log(s,t,e,n)}if(i.length===0)throw new Error("no empty space in board");return i}const W=p,M=N;function C(n){let i=0;for(let e=0;e<6;e++)for(let t=0;t<=7-4;t++){const s=n[e].slice(t,t+4);i+=$(s)}for(let e=0;e<7;e++)for(let t=0;t<=6-4;t++){const s=[n[t][e],n[t+1][e],n[t+2][e],n[t+3][e]];i+=$(s)}for(let e=0;e<=6-4;e++)for(let t=0;t<=7-4;t++){const s=[n[e][t],n[e+1][t+1],n[e+2][t+2],n[e+3][t+3]];i+=$(s)}for(let e=3;e<6;e++)for(let t=0;t<=7-4;t++){const s=[n[e][t],n[e-1][t+1],n[e-2][t+2],n[e-3][t+3]];i+=$(s)}return i}function $(n){let i=0;const e=n.filter(c=>c===W).length,t=n.filter(c=>c===M).length,s=n.filter(c=>c===null).length;return e===4?i+=1e3:t===4?i-=1e3:e===3&&s===1?i+=100:t===3&&s===1?i-=100:e===2&&s===2?i+=10:t===2&&s===2&&(i-=10),i}function E(n){for(let e=0;e<6;e++)for(let t=0;t<=7-4;t++){const s=n[e][t];if([n[e][t],n[e][t+1],n[e][t+2],n[e][t+3]].filter(l=>l&&l===s).length===4)return{player:s,status:"win",type:"row",combination:new Set([`${e}${t}`,`${e}${t+1}`,`${e}${t+2}`,`${e}${t+3}`])}}for(let e=0;e<7;e++)for(let t=0;t<=6-4;t++){const s=n[t][e];if([n[t][e],n[t+1][e],n[t+2][e],n[t+3][e]].filter(l=>l&&l===s).length===4)return{player:s,status:"win",type:"column",combination:new Set([`${t}${e}`,`${t+1}${e}`,`${t+2}${e}`,`${t+3}${e}`])}}for(let e=0;e<=6-4;e++)for(let t=0;t<=7-4;t++){const s=n[e][t];if([n[e][t],n[e+1][t+1],n[e+2][t+2],n[e+3][t+3]].filter(l=>l&&l===s).length===4)return{player:s,status:"win",type:"diagonal",combination:new Set([`${e}${t}`,`${e+1}${t+1}`,`${e+2}${t+2}`,`${e+3}${t+3}`])}}for(let e=3;e<6;e++)for(let t=0;t<=7-4;t++){const s=n[e][t];if([n[e][t],n[e-1][t+1],n[e-2][t+2],n[e-3][t+3]].filter(l=>l&&l===s).length===4)return{player:s,status:"win",type:"anti-diagonal",combination:new Set([`${e}${t}`,`${e-1}${t+1}`,`${e-2}${t+2}`,`${e-3}${t+3}`])}}let i=!1;return n.forEach(e=>i=i||e.findIndex(t=>t===null)>=0),i?null:{combination:null,status:"tie",type:"no empty space",player:null}}const I=p,w=N,R={[L]:0,[h]:10};function T(n,i){const e=O(n);let t=-1/0,s=e[0];return i===y?s=e[Math.floor(Math.random()*e.length)]:e.forEach(({row:c,column:l})=>{n[c][l]=I;let r=m({board:n,isMaximizing:!1,alpha:-1/0,beta:1/0,depth:0,difficulty:i});n[c][l]=null,r>t&&(t=r,s={row:c,column:l}),console.log({column:l,score:r})}),n[s.row][s.column]=I,console.log(JSON.stringify(n)),n}function m({board:n,isMaximizing:i,depth:e,alpha:t,beta:s,difficulty:c}){const l=E(n);if(e===R[c]||l){if(l){const{status:o,player:f}=l;return o===g?f===I?1e6-e:e-1e6:0}return C(n)}const r=O(n);if(i){let o=-1/0;for(const{row:f,column:u}of r){n[f][u]=I;let S=m({board:n,alpha:t,beta:s,depth:e+1,isMaximizing:!1,difficulty:c});if(n[f][u]=null,o=Math.max(S,o),t=Math.max(S,t),o>=s)break}return o}else{let o=1/0;for(const{row:f,column:u}of r){n[f][u]=w;let S=m({board:n,alpha:t,beta:s,depth:e+1,isMaximizing:!0,difficulty:c});if(n[f][u]=null,o=Math.min(S,o),s=Math.min(S,s),o<=t)break}return o}}self.addEventListener("message",n=>{const{board:i,difficulty:e}=n.data,t=T(i,e);self.postMessage(t)})})();
